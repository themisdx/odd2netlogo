globals [
  __INTERNAL__stop ; variable to indicate that there is a stop
  similar-neighbours ; total of similar neighbours
  total-neighbours ; total of neighbours
  percent-similar ; on the average, what percent of a turtle's neighbours are the same colour as that turtle?
  percent-unhappy ; what percent of the turtles are unhappy?
]

breed [ green-turtles green-turtle ] ; a green turtle

breed [ red-turtles red-turtle ] ; a red turtle

turtles-own [
  similar-nearby ; how many neighboring patches have a turtle with my color?
  total-nearby ; how many neighboring patches have a turtle?
  happy? ; for each turtle, indicates whether at least %-similar-wanted percent of that turtle's neighbors are the same color as the turtle
]

to setup
  clear-all
  set __INTERNAL__stop false
  let num-green-turtles number-of-turtles / 2
  create-green-turtles num-green-turtles [ ; create the green-turtles
    set color green
    set shape "turtle"
    set size 1
    setxy random-xcor random-ycor ; spread green-turtles throughout the environment
  ]
  let num-red-turtles number-of-turtles / 2
  create-red-turtles num-red-turtles [ ; create the red-turtles
    set color red
    set shape "turtle"
    set size 1
    setxy random-xcor random-ycor ; spread red-turtles throughout the environment
  ]
  calculate ; init synthetic attributes
  calculate-globals ; init synthetic model attributes
  reset-ticks
end

to move-if-not-happy [ _me ] ; 
ask _me [ ; all access is to _me
  if happy? = false [
    find-new-spot _me
  ]
]
end

to move-on-when-occupied [ _me _other ] ; 
ask _me [ ; all access is to _me
  find-new-spot _me
]
end

to find-new-spot [ _me ] ; 
ask _me [ ; all access is to _me
  right random 360
  forward precision (random-float (10)) 2
  setxy pxcor pycor ; align to center of patch
  ask up-to-n-of 1 other turtles-here [
    move-on-when-occupied _me self
  ]
]
end

to go
  if __INTERNAL__stop [ ; stop button was pressed
    set __INTERNAL__stop false
    stop
  ]
  if all? turtles [ happy? = true ] [ stop ]
  ask turtles [
    move-if-not-happy self
  ]
  calculate ; update synthetic attributes
  calculate-globals ; update synthetic model attributes
  tick
end

to stopping
  set __INTERNAL__stop true
end

to calculate; compute synthetic attributes
  ask turtles [
    set similar-nearby count (turtles-on neighbors) with [ color = [ color ] of myself ]
    set total-nearby count (turtles-on neighbors)
    set happy? similar-nearby >= (%-similar-wanted * total-nearby / 100)
  ]
end

to calculate-globals; compute synthetic model attributes
  set similar-neighbours Sum [similar-nearby] of turtles
  set total-neighbours Sum [total-nearby] of turtles
  set percent-similar (similar-neighbours / total-neighbours) * 100
  set percent-unhappy (count turtles with [happy? = false] / number-of-turtles) * 100
end

; Automatically generated by ODD2NetLogo.
; See Info tab for more information.
@#$#@#$#@
GRAPHICS-WINDOW
250
10
100
100
-1
-1
7
1
10
1
1
1
0
1
1
1
-25
25
-25
25
1
1
1
ticks
30.0

BUTTON
10
10
80
40
setup
setup
NIL
1
T
OBSERVER
NIL
NIL
NIL
NIL
1

BUTTON
90
10
160
40
go
go
T
1
T
OBSERVER
NIL
NIL
NIL
NIL
0

BUTTON
170
10
240
40
stop
stopping
NIL
1
T
OBSERVER
NIL
NIL
NIL
NIL
1

SLIDER
10
55
240
90
%-similar-wanted
%-similar-wanted
0
100
30
1
1
NIL
HORIZONTAL

SLIDER
10
100
240
135
number-of-turtles
number-of-turtles
500
2500
2000
10
1
NIL
HORIZONTAL

PLOT
250
385
615
557
Model Plot
time
NIL
0
10
0
10
true
true
"" ""
PENS
"Percent Similar" 1.0 0 -16777216 true "" "plot  percent-similar"
"Percent Unhappy" 1.0 0 -7500403 true "" "plot  percent-unhappy"

@#$#@#$#@
## NetLogo info tab
This project models the behavior of red and green turtles in a mythical pond, which want to live near some of "its own".

## Model Role


## Target Audience

## Purpose

## Research Question

## Entities
### entity green-turtle
with attributes 
### entity red-turtle
with attributes 

## Model Parameters
%-similar-wanted
number-of-turtles

## Attributes that Change During the Simulation

## User Experimentation Options
The user can change the following attributes to create different experiments:
%-similar-wanted
number-of-turtles

## Data Collected in the Simulation

## Original
adapted from NetLogo models library: IABM textbook / chapter 3 / Segregation Extensions / Segregation Simple

## Acknowledgement
This model is from Chapter Three of the book “Introduction to Agent-Based Modeling: Modeling Natural, Social and Engineered Complex Systems with NetLogo”, by Uri Wilensky & William Rand.
Wilensky, U. & Rand, W. (2015). Introduction to Agent-Based Modeling: Modeling Natural, Social and Engineered Complex Systems with NetLogo. Cambridge, MA. MIT Press.
This model is in the IABM Textbook folder of the NetLogo Models Library. The model, as well as any updates to the model, can also be found on the textbook website: http://www.intro-to-abm.com/.

## What is it?
This project models the behavior of two types of turtles in a mythical pond. The red turtles and green turtles get along with one another. But each turtle wants to make sure that it lives near some of “its own.” That is, each red turtle wants to live near at least some red turtles, and each green turtle wants to live near at least some green turtles. The simulation shows how these individual preferences ripple through the pond, leading to large-scale patterns.
This project was inspired by Thomas Schelling’s writings about social systems (particularly with regards to housing segregation in cities).
This model is a simplified version of the Segregation model that is in the Social Science section of the NetLogo models library.

## How to use it?
Click the SETUP button to set up the turtles. There are equal numbers of red and green turtles. The turtles move around until there is at most one turtle on a patch. Click GO to start the simulation. If turtles don’t have enough same-color neighbors, they jump to a nearby patch.
The NUMBER slider controls the total number of turtles. (It takes effect the next time you click SETUP.) The %-SIMILAR-WANTED slider controls the percentage of same-color turtles that each turtle wants among its neighbors. For example, if the slider is set at 30, each green turtle wants at least 30% of its neighbors to be green turtles.
The “PERCENT SIMILAR” monitor shows the average percentage of same-color neighbors for each turtle. It starts at about 0.5, since each turtle starts (on average) with an equal number of red and green turtles as neighbors. The “PERCENT UNHAPPY” monitor shows the percent of turtles that have fewer same-color neighbors than they want (and thus want to move). Both monitors are also plotted.

## Things to notice
When you execute SETUP, the red and green turtles are randomly distributed throughout the pond. But many turtles are “unhappy” since they don’t have enough same-color neighbors. The unhappy turtles jump to new locations in the vicinity. But in the new locations, they might tip the balance of the local population, prompting other turtles to leave. If a few red turtles move into an area, the local green turtles might leave. But when the green turtles move to a new area, they might prompt red turtles to leave that area.
Over time, the number of unhappy turtles decreases. But the pond becomes more segregated, with clusters of red turtles and clusters of green turtles.
In the case where each turtle wants at least 30% same-color neighbors, the turtles end up with (on average) 70% same-color neighbors. So relatively small individual preferences can lead to significant overall segregation.

## Things to try
Try different values for %-SIMILAR-WANTED. How does the overall degree of segregation change?
If each turtle wants at least 40% same-color neighbors, what percentage (on average) do they end up with?

## Netlogo features
In the UPDATE-GLOBALS procedure, note the use of SUM, COUNT and WITH to compute the percentages displayed in the monitors and plots.

## Credits and references
This model is a simplified version of:
Wilensky, U. (1997). NetLogo Segregation model. http://ccl.northwestern.edu/netlogo/models/Segregation. Center for Connected Learning and Computer-Based Modeling, Northwestern University, Evanston, IL.
The original work by Thomas Schelling was published in: Schelling, T. (1978). Micromotives and Macrobehavior. New York: Norton.
See also: Rauch, J. (2002). Seeing Around Corners; The Atlantic Monthly; April 2002;Volume 289, No. 4; 35-48. https://www.theatlantic.com/magazine/archive/2002/04/seeing-around-corners/302471/

## How to cite?
This model is part of the textbook, “Introduction to Agent-Based Modeling: Modeling Natural, Social and Engineered Complex Systems with NetLogo.”
If you mention this model or the NetLogo software in a publication, we ask that you include the citations below.
For the model itself:
Wilensky, U., Rand, W. (2006). NetLogo Segregation Simple model. http://ccl.northwestern.edu/netlogo/models/SegregationSimple. Center for Connected Learning and Computer-Based Modeling, Northwestern Institute on Complex Systems, Northwestern University, Evanston, IL.
Please cite the NetLogo software as:
Wilensky, U. (1999). NetLogo. http://ccl.northwestern.edu/netlogo/. Center for Connected Learning and Computer-Based Modeling, Northwestern University, Evanston, IL.
Please cite the textbook as:
Wilensky, U. & Rand, W. (2015). Introduction to Agent-Based Modeling: Modeling Natural, Social and Engineered Complex Systems with NetLogo. Cambridge, MA. MIT Press.

## Copyright and License
Copyright 2021 University of Agder.
![CC BY-NC-SA 3.0](http://ccl.northwestern.edu/images/creativecommons/byncsa.png)

This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0 License. To view a copy of this license, visit https://creativecommons.org/licenses/by-nc-sa/3.0/ or send a letter to Creative Commons, 559 Nathan Abbott Way, Stanford, California 94305, USA.

@#$#@#$#@
@#$#@#$#@
NetLogo 6.1.1
@#$#@#$#@
@#$#@#$#@
@#$#@#$#@
@#$#@#$#@
@#$#@#$#@
@#$#@#$#@
@#$#@#$#@
